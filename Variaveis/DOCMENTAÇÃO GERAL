DOCMENTAÇÃO GERAL
  
Escopo de Variáveis
	1 - Escopo Local
		Dentro de um Método ou Construtor
		Ex: Variáveis Local Arquivo: EscopoDeVariaveisLocais.java
			Uma variável local é uma variável que foi definida dentro de um método ou um construtor, e essas variáveis locais só poderão ser acessadas, dentro daquele escopo.
			Escopos válidos são aqueles definidos no:
			 	- Próprio método; 
			 	- Construtor informado através de um parâmetro ou definidos internamente
			 	- Dentro de blocos específicos, como if, for ou while

	2 - Escopo Variável de Instância ou Objeto
		Essa variável pode ser acessada dentro de qualquer lugar dentro da minha instância ou do meu objeto
		Quando eu tenho variáveis de instância também chamadas de (variáveis de objeto, atributo ou membro), eu posso acessar tanto dentro do construtor, quanto dentro de métodos(Exceto em métodos estáticos)

	3 - Variável de Classe(Estática)
		Uma variável estática, ou variável de classe, existe uma única para aquela classe
		Uma variável estática, pode ser acessada através de qualquer escopo(Dentro de um método local, dentro de um construtor, dentro de um outro método, através da referência da classe(pessoa.id), através da referência da instância(p.id))

		Um método estático também pode acessar variáveis estáticas

		Regra Geral
			- Variáveis estáticas podem ser acessadas de qualquer lugar, desde que sejam respeitados os modificadores de acesso, podem ser acessadas através do 
			nome da classe, ou através de instância da classe e ou do tipo

			Continuar vídeo a partir dos 14:00 -> Aula 1 Certificação


	Obs: Sobre Variáveis

	O QUE NÃO SE PODE SOBRE VARIÁVEIS LOCAIS
	
	- Não pode existir 2 variáveis locais com o mesmo nome
		- (O compilador informa dizendo que uma variável já foi definida com aquele nome "java:15: error: variable p is already defined in method main(String[])")

	- Não podem existir 2 variavéis locais com o mesmo nome mesmo que uma vem a ser passada como parâmetro

	- Não pode existir em uma classe uma variável estática e uma variável membro na mesma classe, não compila 
	Ex.
		class A{
			static int a;
			int a;
		}

	O QUE SE PODE SOBRE VARIÁVEIS LOCAIS

	/*
		Posso ter duas varáveis com o mesmo nome em uma classe, sendo uma um parâmetro e outro um atributo

	*/
	class Pessoa{
		static int x=0;
		public static void setX(int x){

		}

	}

	Detalhamento
		Variável Local com Variável Membro Posso Ter
		Variável Local com Variável de Instância Posso Ter
		Variável Local com Variável Local NÃO POSSO TER

	Shadowing //Capacidade de esconder o acesso a uma das variáveis
	Ex.
	class Pessoa{
		static int x=0;
		public static void setX(int x){
			this.x = x; //Isso é o Shadowing ... Eu não acesso direto o dado se eu acessar diretamente eu estou acessando o parâmetro
		}

	}

	Ao escrever uma variável com o mesmo nome quais casos não posso
		Duas variáveis locais com o mesmo nome não posso
		Variável membro e variável de instância com mesmo nome não pode
		Ex.
			class A{
				static int x = 0
				int x = 0;
			}

		Combinar uma variável de Instância com uma variável local pode
		Combinar uma variável Estática com uma variável local pode
		Para esses casos tem o shadowing

		Para forçar a utilização de Classes
			Em variáveis de instância eu uso o this.
			Em variáveis de Classe eu uso o Pessoa.
			Shadowing //Faz acessar as variáveis locais


Resumo
	Foram vistos 
		-	Variáveis locais que podem ser definidas dentro de um método ou de um construtor ou que vivem dentro de um bloco(Pode ser if ou for)
		-   Variáveis de instância ou variáveis membro, também chamadas de atributo ou variáveis de objeto
		-   Variáveis Estáticas ou variáveis da classe, podem ser acessadas de qualquer lugar, desde qie seja referenciada através de um objeto de instância ou referenciada através de um nome da classe

		- Conflito de escopo
			- Conflito de nomes em escopos distintos
				- No mesmo escopo não pode
				- Em escopo static e de instância não pode
				- Só pode no escopo de static e local ou membro e local

















	Modificadores de Acesso
		- Public 
		- Private
		- Default
		- Protected






  - Nomes de Varniáveis inválidas
  
    int 2alunos; // não pode iniciar com dígitos
	int quantidade alunos; // não pode ter espaços
	int new; // new é uma palavra reservada do Java


- Tipos Primitivos (Continuar Página 50)
	boolean / 
	char
	byte
	short
	int
	long
	float
	double



