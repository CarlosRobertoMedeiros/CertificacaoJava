DOCMENTAÇÃO GERAL
  
Escopo de Variáveis
	1 - Escopo Local
		Dentro de um Método ou Construtor
		Ex: Variáveis Local Arquivo: EscopoDeVariaveisLocais.java
			Uma variável local é uma variável que foi definida dentro de um método ou um construtor, e essas variáveis locais só poderão ser acessadas, dentro daquele escopo.
			A variável local tem que ser inicializada ao ser criada, caso contrário da erro na compilação
			Escopos válidos são aqueles definidos no:
			 	- Próprio método; 
			 	- Construtor informado através de um parâmetro ou definidos internamente
			 	- Dentro de blocos específicos, como if, for ou while

	2 - Escopo Variável de Instância ou Objeto
		Essa variável pode ser acessada dentro de qualquer lugar dentro da minha instância ou do meu objeto
		Quando eu tenho variáveis de instância também chamadas de (variáveis de objeto, atributo ou membro), eu posso acessar tanto dentro do construtor, quanto dentro de métodos(Exceto em métodos estáticos)

	3 - Variável de Classe(Estática)
		Uma variável estática, ou variável de classe, existe uma única para aquela classe
		Uma variável estática, pode ser acessada através de qualquer escopo(Dentro de um método local, dentro de um construtor, dentro de um outro método, através da referência da classe(pessoa.id), através da referência da instância(p.id))

		Um método estático também pode acessar variáveis estáticas

		Regra Geral
			- Variáveis estáticas podem ser acessadas de qualquer lugar, desde que sejam respeitados os modificadores de acesso, podem ser acessadas através do 
			nome da classe, ou através de instância da classe e ou do tipo


	Obs: Sobre Variáveis

	O QUE NÃO SE PODE SOBRE VARIÁVEIS LOCAIS
	
	- Não pode existir 2 variáveis locais com o mesmo nome
		- (O compilador informa dizendo que uma variável já foi definida com aquele nome "java:15: error: variable p is already defined in method main(String[])")

	- Não podem existir 2 variavéis locais com o mesmo nome mesmo que uma vem a ser passada como parâmetro

	- Não pode existir em uma classe uma variável estática e uma variável membro na mesma classe, não compila 
	Ex.
		class A{
			static int a;
			int a;
		}

	O QUE SE PODE SOBRE VARIÁVEIS LOCAIS

	/*
		Posso ter duas varáveis com o mesmo nome em uma classe, sendo uma um parâmetro e outro um atributo

	*/
	class Pessoa{
		static int x=0;
		public static void setX(int x){

		}

	}

	Detalhamento
		Variável Local com Variável Membro Posso Ter
		Variável Local com Variável de Instância Posso Ter
		Variável Local com Variável Local NÃO POSSO TER

	Shadowing //Capacidade de esconder o acesso a uma das variáveis
	Ex.
	class Pessoa{
		static int x=0;
		public static void setX(int x){
			this.x = x; //Isso é o Shadowing ... Eu não acesso direto o dado se eu acessar diretamente eu estou acessando o parâmetro
		}

	}

	Ao escrever uma variável com o mesmo nome quais casos não posso
		Duas variáveis locais com o mesmo nome não posso
		Variável membro e variável de instância com mesmo nome não pode
		Ex.
			class A{
				static int x = 0
				int x = 0;
			}

		Combinar uma variável de Instância com uma variável local pode
		Combinar uma variável Estática com uma variável local pode
		Para esses casos tem o shadowing

		Para forçar a utilização de Classes
			Em variáveis de instância eu uso o this.
			Em variáveis de Classe eu uso o Pessoa.
			Shadowing //Faz acessar as variáveis locais


Resumo
	Foram vistos 
		-	Variáveis locais que podem ser definidas dentro de um método ou de um construtor ou que vivem dentro de um bloco(Pode ser if ou for)
		-   Variáveis de instância ou variáveis membro, também chamadas de atributo ou variáveis de objeto
		-   Variáveis Estáticas ou variáveis da classe, podem ser acessadas de qualquer lugar, desde que seja referenciada através de um objeto de instância ou referenciada através de um nome da classe

		- Conflito de escopo
			- Conflito de nomes em escopos distintos
				- No mesmo escopo não pode
				- Em escopo static e de instância não pode
				- Só pode no escopo de static e local ou membro e local


Vídeo 2 - Define a estrutura de uma classe java
	
		Organização da Classe Java

		Começa com Pacote (Apenas um pacote por arquivo)
			package br.com.roberto.certificacao;
			Caso eu não fale o pacote o java entende como pacote Default

		Em seguinda tem os Imports (Pode existir vários Imports no mesmo arquivo)
			import java.util.Date;
			import java.io.*;

		Em Seguida Classe ou Iterface ou Enum
		Exemplos:

			class Pessoa{

			}

			interface Figura{

			}

			enum Condicoes{
			 	POSITIVA,
			 	NEGATIVA
			}

		Caso Tenha uma classe + 1 interface ou etc  ... o Java ao compilar ele gera um .class para cada um dos tipos(classe,Interface,enum)


		//Os comentários pode estar em qualquer lugar
		//Comentário Simples Tudo a direita das duas barras é comentário
		/*
			Tudo entre o Barra asterisco e asterisco Barra é comentário
		*/

		/**
			tudo entre Barra e 2 asteriscos e asterisco e barra 
			Javadoc Serve para documentar a classe, os pacotes, as interfaces os métodos etc.
		*/

		 Olhar a classe Pessoa.Java
		 
		 Um cuidado Importante a ser tomado é que ....	
         Dentro de um arquivo .java eu só posso ter uma interface ou classe ou tipo pública

         Outra Regra
         Se a classe é Publica ela tem que ter o mesmo nome do arquivo


         Cuidados Importantes da Aula 2

         um arquivo java, vários tipos Ok
         um arquivo java, um único público OK
         um arquivo java, vários público ERRADO
         um arquivo java, público com o nome do arquivo OK
         um arquivo java, público com o nome diferente ERRADO

Vídeo 3 -  Crie aplicacoes Java executaveis com um metodo main         
		
		Toda classe java chamada na linha de comando deve possuir o método main
		Para uma classe ser executada tem que ter o método main

		Para compilar um arquivo em java é digitado 
		javac nomearquivo.java

		para rodar o programa é o nome da classe que tem o método main
		java nomedaclasse //O nome da classe é igual o nome do arquivo

		//Continuar a partir dos 3 minutos























	Modificadores de Acesso
		- Public 
		- Private
		- Default
		- Protected






  - Nomes de Varniáveis inválidas
  
    int 2alunos; // não pode iniciar com dígitos
	int quantidade alunos; // não pode ter espaços
	int new; // new é uma palavra reservada do Java


- Tipos Primitivos (Continuar Página 50)
	boolean / 
	char
	byte
	short
	int
	long
	float
	double



